// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/miqdadyyy/jetdevs-assesment/internal/entity"
	mock "github.com/stretchr/testify/mock"

	models "github.com/miqdadyyy/jetdevs-assesment/internal/repository/article/models"
)

// ArticleUsecaseInterface is an autogenerated mock type for the ArticleUsecaseInterface type
type ArticleUsecaseInterface struct {
	mock.Mock
}

// CreateArticle provides a mock function with given fields: ctx, payload
func (_m *ArticleUsecaseInterface) CreateArticle(ctx context.Context, payload entity.CreateArticleRequest) (*models.Article, error) {
	ret := _m.Called(ctx, payload)

	var r0 *models.Article
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateArticleRequest) *models.Article); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateArticleRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComment provides a mock function with given fields: ctx, payload
func (_m *ArticleUsecaseInterface) CreateComment(ctx context.Context, payload entity.CreateCommentRequest) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateCommentRequest) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticleDetail provides a mock function with given fields: ctx, payload
func (_m *ArticleUsecaseInterface) GetArticleDetail(ctx context.Context, payload entity.GetArticleDetailRequest) (*entity.GetArticleDetailResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *entity.GetArticleDetailResponse
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetArticleDetailRequest) *entity.GetArticleDetailResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetArticleDetailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.GetArticleDetailRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesByPayload provides a mock function with given fields: ctx, payload
func (_m *ArticleUsecaseInterface) GetArticlesByPayload(ctx context.Context, payload entity.GetArticleRequest) (*entity.GetArticleResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *entity.GetArticleResponse
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetArticleRequest) *entity.GetArticleResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GetArticleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.GetArticleRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewArticleUsecaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleUsecaseInterface creates a new instance of ArticleUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleUsecaseInterface(t mockConstructorTestingTNewArticleUsecaseInterface) *ArticleUsecaseInterface {
	mock := &ArticleUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
